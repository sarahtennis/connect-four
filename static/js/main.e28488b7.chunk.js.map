{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Selections/Selections.js","components/Win/Win.js","components/Tie/Tie.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","concat","color","Board","board","map","row","rIndex","cell","cIndex","components_Square_Square","key","Number","parseInt","buttons","SelectionButton","_this","this","onClick","dropChip","number","disabled","disableButtons","React","Component","Selections","button","Selections_SelectionButton","Win","Tie","colorToggle","b","r","initialize","currentColor","rowCount","chipsDropped","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","closeModal","modal","setTimeout","setState","defineProperty","column","state","currentChips","newBoard","toConsumableArray","newRowCount","Math","max","prevState","console","log","win","verticalWin","horizontalWin","rightDiagonalWin","leftDiagonalWin","startRow","startColumn","count","x","bool","tie","objectSpread","components_Selections_Selections","components_Board_Board","components_Win_Win","components_Tie_Tie","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e28488b7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = props => {\n  return (\n    <div className=\"square\">\n      <div className={`circle ${props.color}`} />\n    </div>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"../Square/Square.js\";\n\nconst Board = props => {\n  return (\n    <div className=\"board\">\n      {props.board.map((row, rIndex) => {\n        return row.map((cell, cIndex) => {\n          if (cell === \"b\") {\n            return (\n              <Square\n                key={Number.parseInt(`${rIndex}${cIndex}`)}\n                color=\"black\"\n              />\n            );\n          } else if (cell === \"r\") {\n            return (\n              <Square key={Number.parseInt(`${rIndex}${cIndex}`)} color=\"red\" />\n            );\n          } else {\n            return <Square key={Number.parseInt(`${rIndex}${cIndex}`)} />;\n          }\n        });\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst buttons = [1, 2, 3, 4, 5, 6, 7];\n\nclass SelectionButton extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"selection-button\"\n        onClick={() => this.props.dropChip(Number.parseInt(this.props.number))}\n        disabled={this.props.disableButtons}\n      >\n        {this.props.number}\n      </button>\n    );\n  }\n}\n\nconst Selections = props => {\n  return (\n    <div className=\"selections\">\n      {buttons.map(button => {\n        return (\n          <SelectionButton\n            key={button}\n            number={button}\n            dropChip={props.dropChip}\n            disableButtons={props.disableButtons}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Selections;\n","import React from \"react\";\n\nconst Win = props => {\n  return <div className=\"win\">You win!</div>;\n};\n\nexport default Win;\n","import React from \"react\";\n\nconst Tie = props => {\n  return <div className=\"tie\">You tied.</div>;\n};\n\nexport default Tie;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Board from \"./components/Board/Board.js\";\nimport Selections from \"./components/Selections/Selections.js\";\nimport Win from \"./components/Win/Win.js\";\nimport Tie from \"./components/Tie/Tie.js\";\n\nconst colorToggle = {\n  b: \"r\",\n  r: \"b\"\n};\n\nconst initialize = {\n  currentColor: \"b\",\n  rowCount: [5, 5, 5, 5, 5, 5, 5],\n  board: [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0]\n  ],\n  disableButtons: false,\n  chipsDropped: 0\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { ...initialize, win: false, tie: false };\n  }\n\n  // reset = () => {\n  //   setTimeout(() => {\n  //     this.setState({ ...initialize }, this.setState({ win: false }));\n  //   }, 3000);\n  // };\n\n  closeModal = modal => {\n    setTimeout(() => {\n      this.setState({ [modal]: false });\n    }, 3000);\n  };\n\n  dropChip = column => {\n    const color = this.state.currentColor;\n    let currentChips = this.state.chipsDropped;\n\n    let newBoard = [...this.state.board];\n\n    if (this.state.rowCount[column - 1] !== -1) {\n      newBoard[this.state.rowCount[column - 1]][column - 1] = color;\n\n      let newRowCount = [...this.state.rowCount];\n\n      newRowCount[column - 1] = Math.max(-1, newRowCount[column - 1] - 1);\n\n      currentChips += 1;\n\n      this.setState(\n        (prevState, props) => ({\n          rowCount: newRowCount,\n          currentColor: colorToggle[prevState.currentColor],\n          board: newBoard,\n          chipsDropped: prevState.chipsDropped + 1\n        }),\n        console.log(this.state.chipsDropped),\n        this.win(this.verticalWin(column, color), currentChips),\n        this.win(\n          this.horizontalWin(this.state.rowCount[column - 1], color),\n          currentChips\n        ),\n        this.win(\n          this.rightDiagonalWin(column, this.state.rowCount[column - 1], color),\n          currentChips\n        ),\n        this.win(\n          this.leftDiagonalWin(column, this.state.rowCount[column - 1], color),\n          currentChips\n        )\n      );\n    }\n  };\n\n  // Checks +slope win\n  rightDiagonalWin = (column, row, color) => {\n    let startRow = row;\n    let startColumn = column - 1;\n\n    while (startRow < 5 && startColumn > 0) {\n      startRow += 1;\n      startColumn -= 1;\n    }\n\n    let count = 0;\n\n    while (startRow >= 0 && startColumn <= 6) {\n      if (this.state.board[startRow][startColumn] === color) {\n        count += 1;\n\n        if (count === 4) {\n          return true;\n        }\n\n        startRow -= 1;\n        startColumn += 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n          startRow -= 1;\n          startColumn += 1;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  // Checks -slope win\n  leftDiagonalWin = (column, row, color) => {\n    let startRow = row;\n    let startColumn = column - 1;\n\n    while (startRow < 5 && startColumn < 6) {\n      startRow += 1;\n      startColumn += 1;\n    }\n\n    let count = 0;\n\n    while (startRow >= 0 && startColumn >= 0) {\n      if (this.state.board[startRow][startColumn] === color) {\n        count += 1;\n\n        if (count === 4) {\n          return true;\n        }\n\n        startRow -= 1;\n        startColumn -= 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n          startRow -= 1;\n          startColumn -= 1;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  verticalWin = (column, color) => {\n    let count = 0;\n\n    for (let x = 0; x < 6; x++) {\n      if (this.state.board[x][column - 1] === color) {\n        count += 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n        }\n      }\n    }\n\n    return count >= 4 ? true : false;\n  };\n\n  horizontalWin = (row, color) => {\n    let count = 0;\n\n    for (let x = 0; x < 7; x++) {\n      if (this.state.board[row][x] === color) {\n        count += 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n        }\n      }\n    }\n\n    return count >= 4 ? true : false;\n  };\n\n  win = (bool, currentChips) => {\n    if (bool) {\n      this.setState(\n        { win: true, disableButtons: true },\n        this.closeModal(\"win\")\n      );\n    }\n\n    if (currentChips >= 42) {\n      this.setState(\n        { tie: true, disableButtons: true },\n        this.closeModal(\"tie\")\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Selections\n          dropChip={this.dropChip}\n          disableButtons={this.state.disableButtons}\n        />\n        <Board board={this.state.board} />\n        {this.state.win ? <Win /> : null}\n        {this.state.tie ? <Tie /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/Square/Square.css\";\nimport \"./components/Board/Board.css\";\nimport \"./components/Selections/Selections.css\";\nimport \"./components/Win/Win.css\";\nimport \"./components/Tie/Tie.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}