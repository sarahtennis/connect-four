{"version":3,"sources":["components/Square/Square.js","components/Arm/Arm.js","components/Board/Board.js","components/Selections/Selections.js","components/Win/Win.js","components/Tie/Tie.js","App.js","serviceWorker.js","index.js"],"names":["Chip","props","react_default","a","createElement","className","concat","color","disableButtons","Square","Square_Chip","Arm","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveSwitch","domSwitch","document","getElementsByClassName","classList","add","reset","setTimeout","remove","_this2","components_Arm_Arm","board","map","row","rIndex","cell","cIndex","Square_Square_Square","key","Number","parseInt","onClick","React","Component","buttons","SelectionButton","chipButtons","querySelectorAll","_loop","x","onclick","dropChip","length","Selections","button","Selections_SelectionButton","number","Win","winDisplay","winner","Tie","tieDisplay","colorToggle","b","r","initialize","currentColor","rowCount","chipsDropped","win","tie","App","setState","objectSpread","closeModal","modal","defineProperty","column","state","currentChips","newBoard","toConsumableArray","newRowCount","Math","max","prevState","verticalWin","horizontalWin","rightDiagonalWin","leftDiagonalWin","startRow","startColumn","count","bool","components_Selections_Selections","components_Board_Board","components_Win_Win","components_Tie_Tie","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38b1d171.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Chip = props => {\n  return (\n    <div\n      className={`circle ${props.color} ${\n        props.disableButtons ? \"disable\" : \"\"\n      }`}\n    >\n      <div className={`inner-circle ${props.color}`}>\n        <div className={`ridge ${props.color}`}>\n          <div className={`inner-ridge ${props.color}`} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Square = props => {\n  return (\n    <div className=\"square\">\n      <Chip {...props} />\n    </div>\n  );\n};\n\nexport { Chip, Square };\n","import React from \"react\";\n\nconst Arm = () => {\n  return (\n    <div className=\"arm\">\n      <div className=\"foot\" />\n    </div>\n  );\n};\n\nexport default Arm;\n","import React from \"react\";\nimport { Square } from \"../Square/Square.js\";\nimport Arm from \"../Arm/Arm.js\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // this.state = { rerender: false };\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   console.log(\"prevprops\", prevProps.board);\n  //   console.log(\"props\", this.props.board);\n\n  //   if (JSON.stringify(this.props.board) !== JSON.stringify(prevProps.board)) {\n  //     this.setState({ rerender: true }, this.setState({ rerender: false }));\n  //   }\n  // }\n\n  moveSwitch = () => {\n    let domSwitch = document.getElementsByClassName(\"switch\");\n    domSwitch = domSwitch[0];\n    domSwitch.classList.add(\"move-switch\");\n    this.props.reset();\n    // this.setState({ rerender: true }, () => {\n    //   this.setState({ rerender: false });\n    // });\n    setTimeout(() => {\n      domSwitch.classList.remove(\"move-switch\");\n    }, 500);\n  };\n\n  render() {\n    return (\n      <div className=\"board-container\">\n        <Arm />\n        <div className=\"yellow-container\">\n          <div className=\"board\">\n            {this.props.board.map((row, rIndex) => {\n              return row.map((cell, cIndex) => {\n                if (cell === \"b\") {\n                  return (\n                    <Square\n                      key={Number.parseInt(`${rIndex}${cIndex}`)}\n                      color=\"black\"\n                    />\n                  );\n                } else if (cell === \"r\") {\n                  return (\n                    <Square\n                      key={Number.parseInt(`${rIndex}${cIndex}`)}\n                      color=\"red\"\n                    />\n                  );\n                } else {\n                  return <Square key={Number.parseInt(`${rIndex}${cIndex}`)} />;\n                }\n              });\n            })}\n          </div>\n          <div className=\"reset-row\">\n            <div className=\"runner\">\n              <div\n                className=\"switch\"\n                onClick={() => {\n                  this.moveSwitch();\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <Arm />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport { Chip } from \"../Square/Square.js\";\n\nconst buttons = [1, 2, 3, 4, 5, 6, 7];\n\nclass SelectionButton extends React.Component {\n  componentDidMount() {\n    const chipButtons = document.querySelectorAll(\"div.selections div.circle\");\n    for (let x = 1; x <= buttons.length; x++) {\n      chipButtons[x - 1].onclick = () => {\n        this.props.dropChip(x);\n      };\n    }\n  }\n\n  render() {\n    return (\n      <Chip\n        color={this.props.color === \"r\" ? \"red\" : \"black\"}\n        disableButtons={this.props.disableButtons}\n      />\n      // <button\n      //   className=\"selection-button\"\n      //   onClick={() => this.props.dropChip(Number.parseInt(this.props.number))}\n      //   disabled={this.props.disableButtons}\n      // >\n      //   {this.props.number}\n      // </button>\n    );\n  }\n}\n\nconst Selections = props => {\n  return (\n    <div className=\"selections\">\n      {buttons.map(button => {\n        return (\n          <SelectionButton\n            key={button}\n            number={button}\n            color={props.color}\n            dropChip={props.dropChip}\n            disableButtons={props.disableButtons}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Selections;\n","import React from \"react\";\n\nconst Win = props => {\n  return (\n    <div className={`win-container  ${props.winDisplay ? \"win-display\" : \"\"}`}>\n      <div className={`win ${props.winner === \"b\" ? \"black\" : \"red\"}`}>\n        {props.winner === \"b\" ? \"Black\" : \"Red\"} wins!\n      </div>\n    </div>\n  );\n};\n\nexport default Win;\n","import React from \"react\";\n\nconst Tie = props => {\n  return (\n    <div className={`tie-container ${props.tieDisplay ? \"tie-display\" : \"\"}`}>\n      <div className=\"tie\">Tie!</div>\n    </div>\n  );\n};\n\nexport default Tie;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Board from \"./components/Board/Board.js\";\nimport Selections from \"./components/Selections/Selections.js\";\nimport Win from \"./components/Win/Win.js\";\nimport Tie from \"./components/Tie/Tie.js\";\n\nconst colorToggle = {\n  b: \"r\",\n  r: \"b\"\n};\n\nconst initialize = {\n  currentColor: \"b\",\n  rowCount: [5, 5, 5, 5, 5, 5, 5],\n  board: [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0]\n  ],\n  disableButtons: false,\n  chipsDropped: 0,\n  win: false,\n  tie: false,\n  winner: null\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = initialize;\n  }\n\n  reset = () => {\n    this.setState({\n      ...initialize,\n      board: [\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n      ]\n    });\n  };\n\n  closeModal = modal => {\n    setTimeout(() => {\n      this.setState({ [modal]: false });\n    }, 3000);\n  };\n\n  dropChip = column => {\n    const color = this.state.currentColor;\n    let currentChips = this.state.chipsDropped;\n\n    let newBoard = [...this.state.board];\n\n    if (this.state.rowCount[column - 1] !== -1) {\n      newBoard[this.state.rowCount[column - 1]][column - 1] = color;\n\n      let newRowCount = [...this.state.rowCount];\n\n      newRowCount[column - 1] = Math.max(-1, newRowCount[column - 1] - 1);\n\n      currentChips += 1;\n\n      this.setState(\n        (prevState, props) => ({\n          rowCount: newRowCount,\n          currentColor: colorToggle[prevState.currentColor],\n          board: newBoard,\n          chipsDropped: prevState.chipsDropped + 1\n        }),\n        this.win(this.verticalWin(column, color), currentChips, color),\n        this.win(\n          this.horizontalWin(this.state.rowCount[column - 1], color),\n          currentChips,\n          color\n        ),\n        this.win(\n          this.rightDiagonalWin(column, this.state.rowCount[column - 1], color),\n          currentChips,\n          color\n        ),\n        this.win(\n          this.leftDiagonalWin(column, this.state.rowCount[column - 1], color),\n          currentChips,\n          color\n        )\n      );\n    }\n  };\n\n  // Checks +slope win\n  rightDiagonalWin = (column, row, color) => {\n    let startRow = row;\n    let startColumn = column - 1;\n\n    while (startRow < 5 && startColumn > 0) {\n      startRow += 1;\n      startColumn -= 1;\n    }\n\n    let count = 0;\n\n    while (startRow >= 0 && startColumn <= 6) {\n      if (this.state.board[startRow][startColumn] === color) {\n        count += 1;\n\n        if (count === 4) {\n          return true;\n        }\n\n        startRow -= 1;\n        startColumn += 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n          startRow -= 1;\n          startColumn += 1;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  // Checks -slope win\n  leftDiagonalWin = (column, row, color) => {\n    let startRow = row;\n    let startColumn = column - 1;\n\n    while (startRow < 5 && startColumn < 6) {\n      startRow += 1;\n      startColumn += 1;\n    }\n\n    let count = 0;\n\n    while (startRow >= 0 && startColumn >= 0) {\n      if (this.state.board[startRow][startColumn] === color) {\n        count += 1;\n\n        if (count === 4) {\n          return true;\n        }\n\n        startRow -= 1;\n        startColumn -= 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n          startRow -= 1;\n          startColumn -= 1;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  verticalWin = (column, color) => {\n    let count = 0;\n\n    for (let x = 0; x < 6; x++) {\n      if (this.state.board[x][column - 1] === color) {\n        count += 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n        }\n      }\n    }\n\n    return count >= 4 ? true : false;\n  };\n\n  horizontalWin = (row, color) => {\n    let count = 0;\n\n    for (let x = 0; x < 7; x++) {\n      if (this.state.board[row][x] === color) {\n        count += 1;\n      } else {\n        if (count < 4) {\n          count = 0;\n        }\n      }\n    }\n\n    return count >= 4 ? true : false;\n  };\n\n  win = (bool, currentChips, color) => {\n    if (bool) {\n      this.setState(\n        { win: true, disableButtons: true, winner: color },\n        this.closeModal(\"win\")\n      );\n    }\n\n    if (currentChips >= 42) {\n      this.setState(\n        { tie: true, disableButtons: true },\n        this.closeModal(\"tie\")\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Selections\n          color={this.state.currentColor}\n          dropChip={this.dropChip}\n          disableButtons={this.state.disableButtons}\n        />\n        <Board board={this.state.board} reset={this.reset} />\n        <Win winner={this.state.winner} winDisplay={this.state.win} />\n        <Tie tieDisplay={this.state.tie} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/Square/Square.css\";\nimport \"./components/Board/Board.css\";\nimport \"./components/Selections/Selections.css\";\nimport \"./components/Win/Win.css\";\nimport \"./components/Tie/Tie.css\";\nimport \"./components/Arm/Arm.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}